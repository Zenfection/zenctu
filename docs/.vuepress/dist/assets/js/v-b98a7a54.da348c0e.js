"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8431],{16066:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-b98a7a54",path:"/cosonganh/CT175-Ly_thuyet_do_thi/Thuchanh/2.html",title:"B√†i th·ª±c h√†nh 2",lang:"vi",frontmatter:{},excerpt:"",headers:[{level:2,title:"Duy·ªát ƒë·ªì th·ªã theo chi·ªÅu s√¢u",slug:"duyet-ƒëo-thi-theo-chieu-sau",children:[{level:3,title:"Ph∆∞∆°ng ph√°p ngƒÉn x·∫øp",slug:"phuong-phap-ngan-xep",children:[]},{level:3,title:"S·ª≠ d·ª•ng ƒë·ªá quy",slug:"su-dung-ƒëe-quy",children:[]}]},{level:2,title:"Duy·ªát ƒë·ªì th·ªã theo chi·ªÅu r·ªông",slug:"duyet-ƒëo-thi-theo-chieu-rong",children:[]},{level:2,title:"T√≠nh Li√™n th√¥ng c·ªßa ƒë·ªì th·ªã",slug:"tinh-lien-thong-cua-ƒëo-thi",children:[{level:3,title:"Ki·ªÉm tra ƒë·ªì th·ªã li√™n th√¥ng",slug:"kiem-tra-ƒëo-thi-lien-thong",children:[]},{level:3,title:"Ki·ªÉm tra ƒë·ªì th·ªã li√™n th√¥ng m·∫°nh",slug:"kiem-tra-ƒëo-thi-lien-thong-manh",children:[]},{level:3,title:"ƒê·∫øm s·ªë li√™n th√¥ng m·∫°nh trong ƒë·ªì th·ªã",slug:"ƒëem-so-lien-thong-manh-trong-ƒëo-thi",children:[]}]}],filePathRelative:"cosonganh/CT175-Ly_thuyet_do_thi/Thuchanh/2.md",git:{updatedTime:1633678804e3,contributors:[{name:"Zenfection",email:"44715845+Zenfection1412@users.noreply.github.com",commits:1}]}}},22028:(n,s,a)=>{a.r(s),a.d(s,{default:()=>m});var p=a(66252);const t=(0,p.uE)('<h1 id="bai-thuc-hanh-2" tabindex="-1"><a class="header-anchor" href="#bai-thuc-hanh-2" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/10/08-14-42-09-icons8-2_cute.png" width="45"> B√†i th·ª±c h√†nh 2</h1><p>Trong b√†i n√†y b·∫°n c·∫ßn n·∫Øm b·∫Øt c√°c m·ª•c nh∆∞ sau :</p><blockquote><ul><li><p>Duy·ªát ƒë·ªì th·ªã theo chi·ªÅu <code>s√¢u</code> v√† <code>r·ªông</code></p></li><li><p>Ki·ªÉm tra t√≠nh li√™n th√¥ng v√† li√™n th√¥ng m·∫°nh c·ªßa ƒë·ªì th·ªã</p></li><li><p>Ki·ªÉm tra ƒë·ªì th·ªã c√≥ chu tr√¨nh kh√¥ng</p></li></ul></blockquote><div class="custom-container tip"><p class="custom-container-title">üí° TH∆Ø VI·ªÜN</p><p>S·ª≠ d·ª•ng c√°c th∆∞ vi·ªán sau:</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span>    <span class="token comment">// th∆∞ vi·ªán c∆° b·∫£n c·ªßa C</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span>  <span class="token comment">// h·ªó tr·ª£ true/false cho C</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;list.h&quot;</span>     <span class="token comment">// th∆∞ vi·ªán c√° nh√¢n h·ªó tr·ª£ danh s√°ch</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stack.h&quot;</span>    <span class="token comment">// th∆∞ vi·ªán c√° nh√¢n h·ªó tr·ª£ ngƒÉn x·∫øp</span></span>\n</code></pre></div></div>',4),o=(0,p.Uk)("‚á£ Download th∆∞ vi·ªán "),e={href:"https://github.com/Zenfection/zenctu/blob/main/docs/cosonganh/CT175-Ly_thuyet_do_thi/Thuchanh/source/list.h",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("list.h"),u=(0,p.Uk)(" v√† "),l={href:"https://github.com/Zenfection/zenctu/blob/main/docs/cosonganh/CT175-Ly_thuyet_do_thi/Thuchanh/source/stack.h",target:"_blank",rel:"noopener noreferrer"},i=(0,p.Uk)("stack.h"),r=(0,p.uE)('<div class="custom-container warning"><p class="custom-container-title">‚ö†Ô∏è L∆ØU √ù</p><p>T·∫•t c·∫£ c√°c ƒë·ªânh trong ƒë·ªì th·ªã b·∫Øt ƒë·∫ßu t·ª´ <code>1</code> thay v√¨ <code>0</code>, n√™n h√£y ƒë·ªÉ √Ω r√µ kh√¥ng th√¨ sai !!!</p></div><h2 id="duyet-ƒëo-thi-theo-chieu-sau" tabindex="-1"><a class="header-anchor" href="#duyet-ƒëo-thi-theo-chieu-sau" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/10/08-14-49-35-icons8-depth.png" width="40"> Duy·ªát ƒë·ªì th·ªã theo chi·ªÅu s√¢u</h2><h3 id="phuong-phap-ngan-xep" tabindex="-1"><a class="header-anchor" href="#phuong-phap-ngan-xep" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/10/08-14-50-21-icons8-pancake.png" width="30"> Ph∆∞∆°ng ph√°p ngƒÉn x·∫øp</h3><blockquote><p>Tr·∫£ v·ªÅ danh s√°ch duy·ªát ƒë·ªì th·ªã theo chi·ªÅu s√¢u d√πng <code>ngƒÉn x·∫øp</code></p></blockquote><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">subDFS</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span> Stack stack<span class="token punctuation">,</span> List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">emptyStack</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token function">pullStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">memberList</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>\n        <span class="token function">insertList</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        List temp <span class="token operator">=</span> <span class="token function">neighbors</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">int</span> v <span class="token operator">=</span> temp<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">memberList</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token function">pushStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nList <span class="token function">DFS</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    List L<span class="token punctuation">;</span>\n    <span class="token function">makeNullList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    List array <span class="token operator">=</span> <span class="token function">arrayGraph</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>Size <span class="token operator">!=</span> G<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        Stack stack<span class="token punctuation">;</span>\n        <span class="token function">makeNullStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">pushStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">subDFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>stack<span class="token punctuation">,</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">memberList</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                x <span class="token operator">=</span> array<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> L<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">‚ö†Ô∏è CH√ö √ù</p><p>H√†m tr·∫£ v·ªÅ ƒë·∫ßy ƒë·ªß c√°c ƒë·ªânh k·ªÉ c·∫£ khi ƒë·ªì th·ªã <code>kh√¥ng li√™n th√¥ng</code>, n√™n n·∫øu b·∫°n c√≥ nhu c·∫ßu kh√°c h√£y s·ª≠ t·ª´ d√≤ng <code>27</code> t·ªõi <code>32</code></p></div><h3 id="su-dung-ƒëe-quy" tabindex="-1"><a class="header-anchor" href="#su-dung-ƒëe-quy" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/10/08-14-51-03-icons8-reset.png" width="30"> S·ª≠ d·ª•ng ƒë·ªá quy</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">DFS_Re</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> bool visited<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>\n\n    List temp <span class="token operator">=</span> <span class="token function">neighbors</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">int</span> u <span class="token operator">=</span> temp<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">DFS_Re</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> u<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">‚ö†Ô∏è L∆ØU √ù</p><p>S·ª≠a h√†m n√†y theo nhu c·∫ßu c·ªßa b·∫°n</p></div><h2 id="duyet-ƒëo-thi-theo-chieu-rong" tabindex="-1"><a class="header-anchor" href="#duyet-ƒëo-thi-theo-chieu-rong" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/10/08-14-49-40-icons8-surface.png" width="35"> Duy·ªát ƒë·ªì th·ªã theo chi·ªÅu r·ªông</h2><blockquote><p>S·ª≠ d·ª•ng danh s√°ch (t∆∞∆°ng ƒë∆∞∆°ng h√†ng ƒë·ª£i)</p></blockquote><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">subBFS</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span> List queue<span class="token punctuation">,</span> List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">emptyList</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token function">elementAt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">memberList</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>\n        <span class="token function">insertList</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        List temp <span class="token operator">=</span> <span class="token function">neighbors</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">int</span> v <span class="token operator">=</span> temp<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">memberList</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token operator">*</span>L<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">memberList</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token function">insertList</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nList <span class="token function">BFS</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    \n    List L<span class="token punctuation">;</span>\n    <span class="token function">makeNullList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    List array <span class="token operator">=</span> <span class="token function">arrayGraph</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>Size <span class="token operator">!=</span> G<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        List queue<span class="token punctuation">;</span>\n        <span class="token function">makeNullList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">insertList</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">subBFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>queue<span class="token punctuation">,</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">memberList</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                x <span class="token operator">=</span> array<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> L<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">‚ö†Ô∏è CH√ö √ù</p><p>H√†m tr·∫£ v·ªÅ ƒë·∫ßy ƒë·ªß c√°c ƒë·ªânh k·ªÉ c·∫£ khi ƒë·ªì th·ªã <code>kh√¥ng li√™n th√¥ng</code>, n√™n n·∫øu b·∫°n c√≥ nhu c·∫ßu kh√°c h√£y s·ª≠ t·ª´ d√≤ng <code>26</code> t·ªõi <code>31</code></p></div><h2 id="tinh-lien-thong-cua-ƒëo-thi" tabindex="-1"><a class="header-anchor" href="#tinh-lien-thong-cua-ƒëo-thi" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/10/08-15-42-29-icons8-connect.png" width="35">T√≠nh Li√™n th√¥ng c·ªßa ƒë·ªì th·ªã</h2><h3 id="kiem-tra-ƒëo-thi-lien-thong" tabindex="-1"><a class="header-anchor" href="#kiem-tra-ƒëo-thi-lien-thong" aria-hidden="true">#</a> Ki·ªÉm tra ƒë·ªì th·ªã li√™n th√¥ng</h3><blockquote><p>L√† ƒë·ªì th·ªã khi m·ªôt ƒë·ªânh b·∫•t k·ª≥ c√≥ th·ªÉ ƒëi t·ªõi t·∫•t c·∫£ c√°c ƒë·ªânh c√≤n l·∫°i trong ƒë·ªì th·ªã</p></blockquote><div class="custom-container tip"><p class="custom-container-title">üí° T∆Ø T∆Ø·ªûNG</p><p>S·ª≠ d·ª•ng h√†m <code>subBFS()</code> ho·∫∑c <code>subDFS()</code> ƒë·ªÉ tr·∫£ v·ªÅ danh s√°ch c√°ch ƒë·ªânh duy·ªát khi duy·ªát qua 1 l·∫ßn</p><p>==&gt; N·∫øu s·ªë ph·∫ßn t·ª≠ trong danh s√°ch = v·ªõi s·ªë ƒë·ªânh trong ƒë·ªì th·ªã th√¨ <code>li√™n th√¥ng</code></p></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">connectedGraph</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    List L<span class="token punctuation">;</span> <span class="token function">makeNullList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    List queue<span class="token punctuation">;</span> <span class="token function">makeNullList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">insertList</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">subBFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>queue<span class="token punctuation">,</span><span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span> \n    \n    <span class="token comment">//List stack; makeNullStack(&amp;stack);</span>\n    <span class="token comment">//pushStack(&amp;stack, x);</span>\n    <span class="token comment">//subDFS(G,stack,&amp;L);</span>\n    <span class="token keyword">return</span> L<span class="token punctuation">.</span>Size <span class="token operator">==</span> G<span class="token punctuation">.</span>n<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="kiem-tra-ƒëo-thi-lien-thong-manh" tabindex="-1"><a class="header-anchor" href="#kiem-tra-ƒëo-thi-lien-thong-manh" aria-hidden="true">#</a> Ki·ªÉm tra ƒë·ªì th·ªã li√™n th√¥ng m·∫°nh</h3>',19),k=(0,p.Uk)("S·ª≠ d·ª•ng l·∫°i h√†m "),b=(0,p.Uk)("duy·ªát theo chi·ªÅu s√¢u b·∫±ng ƒë·ªá quy"),h=(0,p.uE)('<div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>bool <span class="token function">checkConnectedStrong</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> G<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        bool visited<span class="token punctuation">[</span>G<span class="token punctuation">.</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// b·∫Øt ƒë·∫ßu t·ª´ ƒë·ªânh 1 thay v√¨ 0</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> G<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// kh·ªüi t·∫°o ban ƒë·∫ßu l√† false</span>\n            visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">DFS_Re</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> i<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// duy·ªát ƒë·ªá quy DFS ƒë·ªì th·ªã</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> G<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// n·∫øu c√≥ 1 ƒë·ªânh ch∆∞a duy·ªát ƒë∆∞·ª£c th√¨ false</span>\n                <span class="token keyword">return</span> false<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> true<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="ƒëem-so-lien-thong-manh-trong-ƒëo-thi" tabindex="-1"><a class="header-anchor" href="#ƒëem-so-lien-thong-manh-trong-ƒëo-thi" aria-hidden="true">#</a> ƒê·∫øm s·ªë li√™n th√¥ng m·∫°nh trong ƒë·ªì th·ªã</h3><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">countStrongConnected</span><span class="token punctuation">(</span>Graph G<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">checkConnectedStrong</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> G<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        bool visited<span class="token punctuation">[</span>G<span class="token punctuation">.</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> G<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// kh·ªüi t·∫°o ban ƒë·∫ßu l√† false</span>\n            visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">DFS_Re</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> i<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// duy·ªát m·ªôt l·∫ßn</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> G<span class="token punctuation">.</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                count<span class="token operator">++</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> count<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>',3),m={render:function(n,s){const a=(0,p.up)("OutboundLink"),m=(0,p.up)("RouterLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("blockquote",null,[(0,p._)("p",null,[o,(0,p._)("a",e,[c,(0,p.Wm)(a)]),u,(0,p._)("a",l,[i,(0,p.Wm)(a)])])]),r,(0,p._)("blockquote",null,[(0,p._)("p",null,[k,(0,p.Wm)(m,{to:"/cosonganh/CT175-Ly_thuyet_do_thi/Thuchanh/2.html#su-dung-%C4%91e-quy"},{default:(0,p.w5)((()=>[b])),_:1})])]),h],64)}}}}]);