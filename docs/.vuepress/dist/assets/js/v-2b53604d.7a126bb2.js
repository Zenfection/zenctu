"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9085],{4496:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-2b53604d",path:"/devbook/java/Advanced/13.html",title:"B√†i 13: Lambda",lang:"vi",frontmatter:{},excerpt:"",headers:[{level:2,title:"1.Gi·ªõi thi·ªáu",slug:"_1-gioi-thieu",children:[]},{level:2,title:"2.S·ª≠ d·ª•ng",slug:"_2-su-dung",children:[]}],filePathRelative:"devbook/java/Advanced/13.md",git:{updatedTime:1629908316e3,contributors:[{name:"Zenfection",email:"44715845+Zenfection1412@users.noreply.github.com",commits:1}]}}},47570:(n,s,a)=>{a.r(s),a.d(s,{default:()=>m});var p=a(66252);const t=(0,p._)("h1",{id:"bai-13-lambda",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#bai-13-lambda","aria-hidden":"true"},"#"),(0,p.Uk)(" B√†i 13: Lambda")],-1),e=(0,p._)("h2",{id:"_1-gioi-thieu",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#_1-gioi-thieu","aria-hidden":"true"},"#"),(0,p.Uk)(" 1.Gi·ªõi thi·ªáu")],-1),c={class:"custom-container tip"},o=(0,p._)("p",{class:"custom-container-title"},[(0,p.Uk)("üí° "),(0,p._)("b",null,"LAMDA"),(0,p.Uk)(" L√Ä G√å ?")],-1),l=(0,p._)("p",null,[(0,p.Uk)("Bi·ªÉu th·ª©c "),(0,p._)("code",null,"Lambda"),(0,p.Uk)(" ƒë∆∞·ª£c th√™m v√†o t·ª´ "),(0,p._)("code",null,"Java 8"),(0,p.Uk)(" tr·ªü v·ªÅ sau.")],-1),u=(0,p._)("li",null,[(0,p.Uk)("B·∫£n ch·∫•t l√† "),(0,p._)("code",null,"method"),(0,p.Uk)(" nh∆∞ng kh√¥ng c√≥ t√™n v√† kh√¥ng thu·ªôc "),(0,p._)("code",null,"class"),(0,p.Uk)(" n√†o")],-1),i=(0,p._)("li",null,"Kh√¥ng khai b√°o ki·ªÉu tr·∫£ v·ªÅ",-1),r=(0,p.Uk)("Kh√¥ng c√≥ "),k=(0,p.Uk)("Ph·∫°m vi truy c·∫≠p"),d=(0,p.uE)('<p><strong>C√ö PH√ÅP:</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ƒë·ªëi s·ªë -<span class="token operator">&gt;</span> bi·ªÉu th·ª©c\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>üí°C√≥ th·ªÉ s·ª≠ d·ª•ng nhi·ªÅu ƒë·ªëi s·ªë, c√°ch nhau b·ªüi d·∫•u <code>,</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">(</span>ƒë·ªëi s·ªë <span class="token number">1</span>, ƒë·ªëi s·ªë <span class="token number">2</span><span class="token punctuation">)</span> -<span class="token operator">&gt;</span> bi·ªÉu th·ª©c\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote><div class="custom-container warning"><p class="custom-container-title">‚ö†Ô∏è H·∫†N CH·∫æ</p><p>Bi·ªÉu th·ª©c <code>Lambda</code> c√≥ h·∫°n ch·∫ø, ch√∫ng ph·∫£i <code>return</code> gi√° tr·ªã ngay v√¨ ch√∫ng kh√¥ng th·ªÉ ch·ª©a <strong>bi·∫øn</strong>,<strong>to√°n t·ª≠</strong> hay c√°c <strong>c√¢u l·ªánh</strong> nh∆∞ <code>if</code>, <code>for</code>...</p></div><p>ƒê·ªÉ th·ª±c hi·ªán c√≥ v·∫•n ƒë·ªÅ ph·ª©c t·∫°p ta n√™n ƒë·ªÉ bi·ªÉu th·ª©c trong d·∫•u <code>{}</code> nh∆∞ sau:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">(</span>ƒë·ªëi s·ªë <span class="token number">1</span>,ƒë·ªëi s·ªë <span class="token number">2</span><span class="token punctuation">)</span> -<span class="token operator">&gt;</span> <span class="token punctuation">{</span>code block<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_2-su-dung" tabindex="-1"><a class="header-anchor" href="#_2-su-dung" aria-hidden="true">#</a> 2.S·ª≠ d·ª•ng</h2><p>Bi·ªÉu th·ª©c <code>Lambda</code> th∆∞·ªùng d√πng ƒë·ªÉ truy·ªÅn d·∫°ng tham s·ªë c·ªßa m·ªôt h√†m nh∆∞ sau :</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    numbers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>\n        <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//Output : 5 9 8 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">‚ö†Ô∏è L∆ØU √ù</p><ul><li>Bi·ªÉu th·ª©c <code>Lambda</code> c√≥ th·ªÉ l∆∞u bi·∫øn n·∫øu ki·ªÉu bi·∫øn l√† m·ªôt <code>interface</code> ch·ªâ c√≥ m·ªôt <code>method</code>, ph·∫£i c√≥ c√πng s·ªë <strong>tham s·ªë</strong> v√† ki·ªÉu <strong>tr·∫£ v·ªÅ</strong></li></ul></div><blockquote><p>üí° <code>Java</code> c√≥ nhi·ªÅu <code>interface</code> s·∫µn, ch·∫≥ng h·∫°n nh∆∞ <code>Consumer</code> trong g√≥i <code>java.util</code></p></blockquote><p><strong>V√≠ d·ª•</strong> : S·ª≠ d·ª•ng <strong>interface</strong> <code>Consumer</code> ƒë·ªÉ l∆∞u tr·ªØ bi·ªÉu th·ª©c <code>Lambda</code> trong m·ªôt bi·∫øn</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Consumer</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> method <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        numbers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//Output : 5 9 8 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>ƒê·ªÉ s·ª≠ d·ª•ng bi·ªÉu th·ª©c <code>Lambda</code> trong m·ªôt <code>method</code> th√¨ <code>method</code> ph·∫£i c√≥ <strong>ƒë·ªëi s·ªë</strong> v√† <strong>interface</strong> c√πng v·ªõi <code>method</code> c·ªßa n√≥ nh∆∞ sau :</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">StringFunction</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">StringFunction</span> exclaim <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">StringFunction</span> ask <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s <span class="token operator">+</span> <span class="token string">&quot;?&quot;</span><span class="token punctuation">;</span>\n        <span class="token function">printFormatted</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">,</span> exclaim<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">printFormatted</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> ask<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printFormatted</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">StringFunction</span> format<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> result <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/*Hello World!\n  Hello?       */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>',15),m={render:function(n,s){const a=(0,p.up)("RouterLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,(0,p._)("div",c,[o,l,(0,p._)("ul",null,[u,i,(0,p._)("li",null,[r,(0,p.Wm)(a,{to:"/language/Java/OOP/2.html"},{default:(0,p.w5)((()=>[k])),_:1})])])]),d],64)}}}}]);