"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5304],{99390:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-36f66c14",path:"/devbook/java/Basic/12.html",title:"Bài 12: Methods",lang:"vi",frontmatter:{},excerpt:"",headers:[{level:2,title:"1.Tạo một methods",slug:"_1-tao-mot-methods",children:[]},{level:2,title:"2.Tham số và đối số trong Methods",slug:"_2-tham-so-va-đoi-so-trong-methods",children:[]},{level:2,title:"3.Giá trị trả về trong method",slug:"_3-gia-tri-tra-ve-trong-method",children:[]},{level:2,title:"4. Method Overloading",slug:"_4-method-overloading",children:[]},{level:2,title:"5.Phạm vi biến trong Method",slug:"_5-pham-vi-bien-trong-method",children:[]},{level:2,title:"6. Hàm đệ quy (recusrion)",slug:"_6-ham-đe-quy-recusrion",children:[]}],filePathRelative:"devbook/java/Basic/12.md",git:{updatedTime:1629908316e3,contributors:[{name:"Zenfection",email:"44715845+Zenfection1412@users.noreply.github.com",commits:1}]}}},19372:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(66252).uE)('<h1 id="bai-12-methods" tabindex="-1"><a class="header-anchor" href="#bai-12-methods" aria-hidden="true">#</a> Bài 12: Methods</h1><blockquote><p>💡 Chúng ta đã sử dụng rất nhiều <code>method</code> như <code>Math.pow(x,y)</code>, <code>Arrays.length</code>... vậy nó là gì ??</p></blockquote><div class="custom-container tip"><p class="custom-container-title"><b>METHOD </b> LÀ GÌ ?</p><p>Là những khối lệnh được thực thi khi ta gọi nó, chúng có một mục đích nhất định còn hay được gọi là <code>functions</code> (<em>hàm</em>).</p></div><p>💡 Các <code>methods</code>như <code>pow(x,y)</code>, <code>length</code> được <code>Java</code> lập trình sẵn cho chúng ta chỉ cần gọi ra và dùng.</p><p>💡 Để dùng <code>methods</code> ta chỉ cần <code>.</code> sau một <code>Object</code>.</p><details class="custom-container details"><summary>🤔 LÝ DO DÙNG METHOD ?</summary><ul><li>🧚‍♂️ Ta chỉ cần định dạng một lần và sử dụng về sau</li><li>🧚‍♂️ Ví dụ: ta code hàm <code>đi</code> cho con mèo, thì tay và chân đều đi, nếu thế ta cần code 2 lần nếu không sử dụng hàm</li></ul></details><h2 id="_1-tao-mot-methods" tabindex="-1"><a class="header-anchor" href="#_1-tao-mot-methods" aria-hidden="true">#</a> 1.Tạo một <code>methods</code></h2><p>Tạo 1 file <code>Demo.java</code> như sau :</p><img title="" src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/02/01-11-04-22-java-oop_8.png" alt="java-oop_8.png" width="515"><div class="custom-container danger"><p class="custom-container-title">⚠️ LƯU Ý</p><p>Khai báo <code>method</code> phải nằm trong một <code>class</code>.</p><p>Các định nghĩa sau :</p><ul><li><p><code>myMethods</code> là tên của <code>method</code> : <em>có thê thay đổi tuỳ bạn</em> (<strong>nhớ quy tắc <code>camelCase</code></strong>)</p></li><li><p><code>static</code> để khai báo nó thuộc <code>Main class</code> chứ không phải là <code>Object</code> của <code>Main clas</code> (<em>không cần hiểu lắm, sẽ hiểu trong phần sau</em>)</p></li><li><p><code>void</code> : không trả về giá trị nào (<em>sẽ tìm hiểu kỹ hơn về sau</em>)</p></li></ul></div><blockquote><p>Gọi lại <code>myMethods</code> trong chính hàm <code>main</code> thì sẽ được thực thi. và ta có thể gọi nhiều lần như sau:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">myMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">myMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">myMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></blockquote><h2 id="_2-tham-so-va-đoi-so-trong-methods" tabindex="-1"><a class="header-anchor" href="#_2-tham-so-va-đoi-so-trong-methods" aria-hidden="true">#</a> 2.Tham số và đối số trong <code>Methods</code></h2><div class="custom-container tip"><p class="custom-container-title"><b>Parameters </b> là gì ?</p><p><code>Parameters</code> (<em>tham số</em>) : được chỉ định sau tên <code>method</code> nằm trong <code>()</code>, có thể chỉ định nhiều đối số nếu bạn muốn cách nhau bởi dấu <code>;</code></p></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> fullName<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fullName <span class="token operator">+</span> <span class="token string">&quot; đẹp trai&quot;</span> <span class="token operator">+</span> age <span class="token string">&quot; tuổi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token string">&quot;Kiệt&quot;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token string">&quot;Zen&quot;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/* output :\nKiệt đẹp trai 18 tuổi\nZen đẹp trai  20 tuổi */</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><blockquote><p>🤔 Quá dễ đúng không nào :</p><ul><li><code>(String full,int age)</code> : gọi là <code>Parameters</code> (<em>tham số</em>)</li><li><code>(&quot;Kiệt&quot;,18)</code> và <code>(&quot;Zen&quot;,20)</code> : gọi là <code>Arguments</code> (<em>đối số</em>)</li></ul></blockquote><div class="custom-container warning"><p class="custom-container-title">⚠️ LƯU Ý</p><p>Tên tham số là <strong>độc lập</strong>, không liên quan tới bất kỳ tham số khác ở ngoài <code>Method</code>, nên bạn cứ đặt thoải mái không sợ trùng.</p></div><h2 id="_3-gia-tri-tra-ve-trong-method" tabindex="-1"><a class="header-anchor" href="#_3-gia-tri-tra-ve-trong-method" aria-hidden="true">#</a> 3.Giá trị trả về trong <code>method</code></h2><blockquote><p>🤔 Như đã để cập ở trên <code>void</code> có nghĩa không trả về cái gì ? Hãy xem ví dụ sau :</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">5</span> <span class="token operator">+</span> x<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// Outputs 8 (5 + 3)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>🔥 Bạn có thể sử dụng các từ khoá như <code>int</code>, <code>float</code>, <code>char</code>... nếu bạn muốn nó trả về giá đó, thay vì <code>void</code></p><div class="custom-container warning"><p class="custom-container-title">⚠️ LƯU Ý</p><p>Tôi khuyết nghị bạn nên đặt biến để lưu trữ giá trị vừa gọi hàm để dễ Debug như sau:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// Outputs 8 (5 + 3)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/02/01-11-24-06-Ảnh chụp Màn hình 2021-02-01 lúc 11.23.21.png"></div><p>🤪 Vậy là bạn có thể biết sau khi thoát khỏi hàm nó thành <code>8</code>, hãy làm cách này thay về cách trên cùng nhé !!!</p></blockquote><p>🧚‍♂️ Ta cũng có thể dùng dùng <code>if..else</code> hay <code>for</code> trong <code>Methods</code> một cách bình thường .</p><details class="custom-container details"><summary><b>THAM KHẢO</b></summary><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n      <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Bạn là thằng nhóc con dưới 18 tuổ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> \n            <span class="token keyword">else</span><span class="token punctuation">{</span>\n              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Bạn trưởng thành rồi, nhưng vẫn nhóc con&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// Outputs :  Bạn trưởng thành rồi, nhưng vẫn nhóc con</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></details><h2 id="_4-method-overloading" tabindex="-1"><a class="header-anchor" href="#_4-method-overloading" aria-hidden="true">#</a> 4. Method Overloading</h2><div class="custom-container tip"><p class="custom-container-title"><b>METHOD OVERLOADING </b>LÀ GÌ ?</p><p>Được gọi là <strong>phương thức nạp chồng</strong> tức là nhiều <code>Methods</code> cùng tên nhau, khác kiểu dữ liệu, hãy theo dõi ví dụ sau:</p></div><details class="custom-container details"><summary>🧚‍♂️ Không sử dụng <b>Overloading</b></summary><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">plusMethodInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">plusMethodDouble</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>🔥 Khi ta muốn số trả về số thực ta phải dùng <code>plusMethodDouble</code> nếu muốn trả về số nguyên phải dùng <code>plusMethodInt</code> 🤪 Vậy ta cần phải nhớ quá nhiều hàm, gây khó cho ta</p></details><details class="custom-container details"><summary>🧚‍♂️ Sử dụng <b>Overloading</b></summary><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">plusMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span> \n  \n<span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">plusMethod</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>🔥 Vậy là chúng ta chỉ cần sử dụng <code>plusMethod</code> và truyền vào số nguyên hay số thực đều được.</p></details><blockquote><p>🚀 Khá dễ hiểu đúng không nào, <code>Overloading</code> chỉ có vậy thôi</p></blockquote><h2 id="_5-pham-vi-bien-trong-method" tabindex="-1"><a class="header-anchor" href="#_5-pham-vi-bien-trong-method" aria-hidden="true">#</a> 5.Phạm vi biến trong <code>Method</code></h2><p>Trong <code>Java</code> biến chỉ có thể truy cập được trong phạm vi chúng được tạo gọi là <code>scope</code></p><details class="custom-container details"><summary>Phạm vi <b>Method</b></summary><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token comment">// không thể sử dụng x ở đây</span>\n      <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n      <span class="token comment">// có thể sử dụng x từ đây</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></details><details class="custom-container details"><summary>Phạm vi <b>Block</b></summary><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//không thể sử dụng x ở đây</span>\n    <span class="token punctuation">{</span> <span class="token comment">//dấu trong ngoặc này là block</span>\n      <span class="token comment">// Không thể sử dụng x ở đây</span>\n      <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n      <span class="token comment">// Có thể sử dụng x</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> \n    <span class="token comment">// không thể sử dụng x ở đây</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><blockquote><p>⚠️ Nó giống như việc bạn sử dụng <code>if</code>, <code>while</code>,<code>for</code>, các biến chỉ tồn tại trong khối mã đó thôi.</p></blockquote></details><blockquote><p>🔥 Bạn đã hiểu rồi đúng không, và tuỳ trường hợp mà ta có thể sử dụng khác nhau, tất cả trường hợp trên gọi là <code>local variable</code> (<em>biến cục bộ</em>).</p><p>🤔 Nếu tôi muốn khai báo một biến mà có thể sử dụng ở bất cứ đâu thì ta phải làm gì ?</p><details class="custom-container details"><summary>🤔 Nếu tôi muốn khai báo một biến mà có thể sử dụng ở bất cứ đâu thì ta phải làm gì ?</summary><p>Ta có thể sử dụng <code>global variables</code> (<em>biến toàn cục</em>) thay vì <em>biến cục bộ</em> ở trên, như sau:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>\n   <span class="token keyword">static</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//khai báo toàn cục</span>\n   <span class="token comment">//Sử dụng x bất kỳ đâu</span>\n   <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n\n   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><blockquote><p>⚠️ Khai báo toàn cục ở dòng đầu tiên của <code>class</code> và thêm <code>static</code> vào trước khai báo.</p></blockquote></details></blockquote><h2 id="_6-ham-đe-quy-recusrion" tabindex="-1"><a class="header-anchor" href="#_6-ham-đe-quy-recusrion" aria-hidden="true">#</a> 6. Hàm đệ quy (<code>recusrion</code>)</h2><p><code>Recusrion</code> (<em>Đệ quy</em>) : là một hàm đặc biệt, nó <strong>gọi lại chính nó</strong>, dùng để giải quyết những vấn đề phức tạp trở nên dễ hơn, ví dụ ảnh như sau:</p><p><img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/02/01-12-45-30-b29.gif" alt="b29.gif"></p><blockquote><p>😭 Đệ quy rất khó để hiểu, và cách duy nhất để làm tốt nó là <code>Debug</code> và <code>test</code>.</p></blockquote><p>Để làm được đệ quy ta cần xác định :</p><ul><li>Điểm dừng của đệ quy</li><li>Quy luật lặp lại</li></ul><p>==&gt; Hãy đến với các ví dụ sau, hiểu hiểu hơn về đệ quy nhé</p><details class="custom-container details"><summary>Dùng để quy <b>Tính tổng từ 1 tới n</b></summary><p>Cho file <code>Demo.java</code> như sau:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum1toN</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">int</span> result <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token function">sum1toN</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//nên sử dụng thêm biến để debug tốt</span>\n      <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">sum1toN</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//nên sử dụng thêm biến này để debug tốt</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// output : 15</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote><p>🧚‍♂️ Bạn có thể thấy nó hơi dài vì đã thêm biến <code>result</code>, nhưng bạn hãy làm thế để tốt cho việc <code>debug</code> nha</p></blockquote><div class="custom-container tip"><p class="custom-container-title">Giải thích</p><ul><li><p><strong>B1</strong> : Xác định điềm dùng ⇨ 0, (<em>n sẽ chạy về tới 0 và dừng</em>)</p></li><li><p><strong>B2</strong> : Xác định quy luật ⇨ n + (n-1) + (n-2)...0 (<em>tới 0 là dừng</em>)</p></li></ul></div></details><details class="custom-container details"><summary>Dùng đệ quy tính <b>giai thừa</b></summary><img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/02/01-13-15-39-giai-thua.png" title="" alt="giai-thua.png" width="300"><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">int</span> result <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//khai báo biến thêm để dễ debug</span>\n      <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//khai báo biến thêm đễ dễ debug</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//Output : 120</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">Giải thích</p><ul><li><p><strong>B1</strong> : Xác định điềm dùng ⇨ 1, (<em>n sẽ chạy về tới 1 và dừng</em>)</p></li><li><p><strong>B2</strong> : Xác định quy luật ⇨ n*(n-1)*...1 (<em>tới 1 là dừng</em>)</p></li></ul></div></details><details class="custom-container details"><summary>Dùng đệ quy tính dãy <b>Fibonacci</b></summary><p><img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/02/01-13-33-27-Ảnh chụp Màn hình 2021-02-01 lúc 13.33.16.png" alt="Ảnh chụp Màn hình 2021-02-01 lúc 13.33.16.png"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//khai báo biến thêm đễ dễ debug </span>\n      <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//khai báo biến thêm đễ dễ debug</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// Output : 13</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">Giải thích</p><ul><li><p><strong>B1</strong> : Xác định điềm dùng ⇨ vị trí n, (<em>chạy tới vị trí n trong dãy fibbonacci và dừng</em>)</p></li><li><p><strong>B2</strong> : Xác định quy luật ⇨ 1 1 2 3 5 8 13... (<em>vị trí 1 và 2 là 1, về sau là số sau bằng tổng 2 số trước</em>)</p></li></ul></div></details><hr><blockquote><p>⚠️ Bản chất của <strong>đệ quy</strong> là cơ chế <code>Stack</code> (<em>ngăn xếp</em>)</p><p>🚀 Nó sẽ không khó khi bạn đặt thêm <strong>biến</strong> và có kỹ năng <code>Debug</code></p></blockquote>',44),p={render:function(n,s){return t}}}}]);