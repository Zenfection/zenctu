"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9428],{70457:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-23ea084a",path:"/cosonganh/CT177-Cau_truc_du_lieu/Thuchanh/4.html",title:"Bài 4. Hàng đợi",lang:"vi",frontmatter:{},excerpt:"",headers:[{level:2,title:"Mô hình",slug:"mo-hinh",children:[]},{level:2,title:"Lý thuyết",slug:"ly-thuyet",children:[]},{level:2,title:"Source Code",slug:"source-code",children:[{level:3,title:"queue.h",slug:"queue-h",children:[]}]}],filePathRelative:"cosonganh/CT177-Cau_truc_du_lieu/Thuchanh/4.md",git:{updatedTime:1631081045e3,contributors:[{name:"Zenfection",email:"44715845+Zenfection1412@users.noreply.github.com",commits:4}]}}},79286:(n,s,a)=>{a.r(s),a.d(s,{default:()=>H});var p=a(66252);const e=(0,p.uE)('<h1 id="bai-4-hang-đoi" tabindex="-1"><a class="header-anchor" href="#bai-4-hang-đoi" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2020/12/16-23-17-32-icons8-joining_queue.png" width="40"> Bài 4. Hàng đợi</h1><h2 id="mo-hinh" tabindex="-1"><a class="header-anchor" href="#mo-hinh" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-31-59-icons8_handle_with_care_35px.png"> Mô hình</h2>',2),t={class:"custom-container tip"},o=(0,p._)("p",{class:"custom-container-title"},"GỒM 2 LOẠI",-1),c={href:"https://www.cs.usfca.edu/~galles/visualization/QueueArray.html",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("Queue-ArrayList"),u=(0,p.Uk)(" - "),i=(0,p._)("em",null,"Ngăn xếp cài đặt theo danh sách đặc",-1),r={href:"https://www.cs.usfca.edu/~galles/visualization/QueueLL.html",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("Queue-LinkedList"),d=(0,p.Uk)(" - "),b=(0,p._)("em",null,"Ngăn xếp cài đạt theo danh sách liên kết",-1),m={id:"ly-thuyet",tabindex:"-1"},h=(0,p._)("a",{class:"header-anchor",href:"#ly-thuyet","aria-hidden":"true"},"#",-1),g=(0,p.Uk)(),v=(0,p._)("img",{src:"https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-30-52-icons8_concept_30px.png"},null,-1),f={href:"https://nguyenvanhieu.vn/hang-doi-queue/",target:"_blank",rel:"noopener noreferrer"},y=(0,p.Uk)("Lý thuyết"),Q=(0,p._)("h2",{id:"source-code",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#source-code","aria-hidden":"true"},"#"),(0,p.Uk)(),(0,p._)("img",{src:"https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-24-29-icons8_google_code_30px.png"}),(0,p.Uk)(" Source Code")],-1),w={id:"queue-h",tabindex:"-1"},_=(0,p._)("a",{class:"header-anchor",href:"#queue-h","aria-hidden":"true"},"#",-1),x=(0,p.Uk)(),T={href:"https://github.com/Zenfection/zenctu/blob/main/docs/cosonganh/CT177-Cau_truc_du_lieu/Source/Queue/queue.h",target:"_blank",rel:"noopener noreferrer"},N=(0,p.Uk)("queue.h"),R=(0,p.uE)('<div class="custom-container tip"><p class="custom-container-title">CẤU TRÚC</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Max_length</span> <span class="token expression"><span class="token number">50</span></span></span>\n<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> Data<span class="token punctuation">[</span>Max_length<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> Front<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> Rear<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>Queue<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">KHỞI TẠO RỘNG HÀNG ĐỢI</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">makeNullQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Q<span class="token operator">-&gt;</span>Front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    Q<span class="token operator">-&gt;</span>Rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">HIỂN THỊ HÀNG ĐỢI</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">displayQueue</span><span class="token punctuation">(</span>Queue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> Q<span class="token punctuation">.</span>Front <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Q<span class="token punctuation">.</span>Rear <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>Q<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">NHẬP N PHẦN TỬ VÀO HÀNG ĐỢI</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">inputQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>Q<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    Q<span class="token operator">-&gt;</span>Front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    Q<span class="token operator">-&gt;</span>Rear <span class="token operator">=</span> n<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">CHÈN PHẦN TỬ X VÀO VỊ TRÍ P TRONG HÀNG ĐỢI</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">insertQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> p<span class="token punctuation">,</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> p <span class="token operator">&gt;</span> Q<span class="token operator">-&gt;</span>Rear<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Postion Invalid !!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>Rear <span class="token operator">==</span> Max_length<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Full Queue!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span><span class="token punctuation">{</span>\n        Q<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>\n        Q<span class="token operator">-&gt;</span>Rear<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">TRẢ V VỊ TRÍ CỦA PHẦN TỬ X</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">locateQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>Front <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Q<span class="token operator">-&gt;</span>Rear <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> i<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">XOÁ PHẦN TỬ TẠI VỊ TRÍ P TRONG HÀNG ĐỢI</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteQueue_byPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> p <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Q<span class="token operator">-&gt;</span>Rear <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        Q<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    Q<span class="token operator">-&gt;</span>Rear<span class="token operator">--</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">XOÁ PHẦN TỬ X TRONG PHẦN TỬ</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteQueue_byValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">locateQueue</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">deleteQueue_byPos</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div>',8),H={render:function(n,s){const a=(0,p.up)("OutboundLink"),H=(0,p.up)("comment");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("div",t,[o,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[(0,p._)("a",c,[l,(0,p.Wm)(a)]),u,i])]),(0,p._)("li",null,[(0,p._)("p",null,[(0,p._)("a",r,[k,(0,p.Wm)(a)]),d,b])])])]),(0,p._)("h2",m,[h,g,v,(0,p._)("a",f,[y,(0,p.Wm)(a)])]),Q,(0,p._)("h3",w,[_,x,(0,p._)("a",T,[N,(0,p.Wm)(a)])]),R,(0,p.Wm)(H)],64)}}}}]);