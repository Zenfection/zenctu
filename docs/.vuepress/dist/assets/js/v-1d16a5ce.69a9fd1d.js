"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4643],{95977:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-1d16a5ce",path:"/cosonganh/CT177-Cau_truc_du_lieu/Thuchanh/6.html",title:"Bài 6. Cây nhị phân AVL",lang:"vi",frontmatter:{},excerpt:"",headers:[{level:2,title:"Mô hình",slug:"mo-hinh",children:[]},{level:2,title:"Lý thuyết",slug:"ly-thuyet",children:[]},{level:2,title:"Source Code",slug:"source-code",children:[{level:3,title:"treeAVL.h",slug:"treeavl-h",children:[]}]}],filePathRelative:"cosonganh/CT177-Cau_truc_du_lieu/Thuchanh/6.md",git:{updatedTime:1631081045e3,contributors:[{name:"Zenfection",email:"44715845+Zenfection1412@users.noreply.github.com",commits:4}]}}},9404:(n,s,a)=>{a.r(s),a.d(s,{default:()=>v});var p=a(66252);const t=(0,p.uE)('<h1 id="bai-6-cay-nhi-phan-avl" tabindex="-1"><a class="header-anchor" href="#bai-6-cay-nhi-phan-avl" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2020/12/16-23-18-13-icons8-tree_structure.png" width="40"> Bài 6. Cây nhị phân AVL</h1><h2 id="mo-hinh" tabindex="-1"><a class="header-anchor" href="#mo-hinh" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-31-59-icons8_handle_with_care_35px.png"> Mô hình</h2>',2),o={class:"custom-container tip"},e=(0,p._)("p",{class:"custom-container-title"},"DATA VISUALIZATION",-1),c=(0,p.Uk)("Mô hình "),r={href:"https://www.cs.usfca.edu/~galles/visualization/AVLtree.html",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("tại đây"),u={id:"ly-thuyet",tabindex:"-1"},k=(0,p._)("a",{class:"header-anchor",href:"#ly-thuyet","aria-hidden":"true"},"#",-1),i=(0,p.Uk)(),b=(0,p._)("img",{src:"https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-30-52-icons8_concept_30px.png"},null,-1),m={href:"https://vietjack.com/cau-truc-du-lieu-va-giai-thuat/giai-thuat-cay-avl.jsp",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("Lý thuyết"),g=(0,p._)("h2",{id:"source-code",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#source-code","aria-hidden":"true"},"#"),(0,p.Uk)(),(0,p._)("img",{src:"https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-24-29-icons8_google_code_30px.png"}),(0,p.Uk)(" Source Code")],-1),h={id:"treeavl-h",tabindex:"-1"},y=(0,p._)("a",{class:"header-anchor",href:"#treeavl-h","aria-hidden":"true"},"#",-1),T=(0,p.Uk)(),w={href:"https://github.com/Zenfection/zenctu/blob/main/docs/cosonganh/CT177-Cau_truc_du_lieu/Source/AVL/treeAVL.h",target:"_blank",rel:"noopener noreferrer"},L=(0,p.Uk)("treeAVL.h"),f=(0,p.uE)('<div class="custom-container tip"><p class="custom-container-title">CẤU TRÚC</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LH</span> <span class="token expression"><span class="token operator">-</span><span class="token number">1</span>   </span><span class="token comment">//? Cây con trái cao hơn</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EH</span> <span class="token expression"><span class="token number">0</span>    </span><span class="token comment">//? Hai cây con bằng nhau</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RH</span> <span class="token expression"><span class="token number">1</span>    </span><span class="token comment">//? Cây con phải cao hơn</span></span>\n<span class="token keyword">struct</span> <span class="token class-name">AVLNode</span><span class="token punctuation">{</span>\n    <span class="token keyword">char</span> balFactor<span class="token punctuation">;</span> <span class="token comment">//! chỉ số căn bằng</span>\n    <span class="token keyword">int</span> data<span class="token punctuation">;</span>\n    <span class="token keyword">struct</span> <span class="token class-name">AVLNode</span> <span class="token operator">*</span>Left<span class="token punctuation">;</span>\n    <span class="token keyword">struct</span> <span class="token class-name">AVLNode</span> <span class="token operator">*</span>Right<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">AVLNode</span> <span class="token operator">*</span>AVLTree<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">TẠO RỘNG TREE AVL</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">makeNullAVLTree</span><span class="token punctuation">(</span>AVLTree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">CHÈN AVLNODE VÀO AVLTREE</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">insertAVLNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>AVLTree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    AVLTree T <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> res<span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>data <span class="token operator">==</span> x<span class="token punctuation">)</span>\n            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>data <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            res <span class="token operator">=</span> <span class="token function">insertAVLNode</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token operator">-&gt;</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>\n                <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n            <span class="token keyword">switch</span> <span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>balFactor<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">case</span> RH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> RH<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token keyword">case</span> EH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> LH<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token keyword">case</span> LH<span class="token operator">:</span> <span class="token function">balanceLeft</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span><span class="token punctuation">{</span>\n            res <span class="token operator">=</span> <span class="token function">insertAVLNode</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token operator">-&gt;</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>\n                <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n            <span class="token keyword">switch</span> <span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>balFactor<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">case</span> LH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token keyword">case</span> EH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> RH<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token keyword">case</span> RH<span class="token operator">:</span> <span class="token function">balanceRight</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span><span class="token punctuation">{</span>\n        <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">AVLNode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">AVLNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token operator">-&gt;</span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>\n        <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span>\n        <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token operator">-&gt;</span>Left <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token operator">-&gt;</span>Right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">TẠO TREE AVL</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>AVLTree <span class="token function">createAVLTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    AVLTree root<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> n<span class="token punctuation">;</span>\n    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">makeNullAVLTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> x<span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">insertAVLNode</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> root<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">3 KIỂU DUYỆT TREE AVL</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// duyệt tiền tự</span>\n<span class="token keyword">void</span> <span class="token function">NLR</span><span class="token punctuation">(</span>AVLTree root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">NLR</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">NLR</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// duyệt trung tự</span>\n<span class="token keyword">void</span> <span class="token function">LNR</span><span class="token punctuation">(</span>AVLTree root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">LNR</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">LNR</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// duyệt hậu tự</span>\n<span class="token keyword">void</span> <span class="token function">LRN</span><span class="token punctuation">(</span>AVLTree root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">LRN</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">LRN</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">4 KIỂU CÂN BẰNG</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// căn bằng trái trái</span>\n<span class="token keyword">void</span> <span class="token function">rorateLL</span><span class="token punctuation">(</span>AVLTree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//* Left-Left =&gt; quay phải</span>\n    AVLTree T <span class="token operator">=</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>\n    AVLTree T1 <span class="token operator">=</span> T<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>\n\n    T<span class="token operator">-&gt;</span>Left <span class="token operator">=</span> T1<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>\n    T1<span class="token operator">-&gt;</span>Right <span class="token operator">=</span> T<span class="token punctuation">;</span>\n\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>T1<span class="token operator">-&gt;</span>balFactor<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">case</span> LH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> EH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> LH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> RH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token operator">=</span> T1<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// căn bằng trái phải</span>\n<span class="token keyword">void</span> <span class="token function">rorateLR</span><span class="token punctuation">(</span>AVLTree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    AVLTree T <span class="token operator">=</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>\n    AVLTree T1 <span class="token operator">=</span> T<span class="token operator">-&gt;</span>Left<span class="token punctuation">;</span>\n    AVLTree T2 <span class="token operator">=</span> T1<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>\n\n    T<span class="token operator">-&gt;</span>Left <span class="token operator">=</span> T2<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>\n    T2<span class="token operator">-&gt;</span>Right <span class="token operator">=</span> T<span class="token punctuation">;</span>\n    T1<span class="token operator">-&gt;</span>Right <span class="token operator">=</span> T2<span class="token operator">-&gt;</span>Left<span class="token punctuation">;</span>\n    T2<span class="token operator">-&gt;</span>Left <span class="token operator">=</span> T1<span class="token punctuation">;</span>\n\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>T2<span class="token operator">-&gt;</span>balFactor<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">case</span> LH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> RH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> EH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> RH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> LH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    T2<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span>\n    <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token operator">=</span> T2<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// căn bằng phải phải</span>\n<span class="token keyword">void</span> <span class="token function">rorateRR</span><span class="token punctuation">(</span>AVLTree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//* Right-Right =&gt; quay trái</span>\n    AVLTree T <span class="token operator">=</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>\n    AVLTree T1 <span class="token operator">=</span> T<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>\n\n    T<span class="token operator">-&gt;</span>Right <span class="token operator">=</span> T1<span class="token operator">-&gt;</span>Left<span class="token punctuation">;</span>\n    T1<span class="token operator">-&gt;</span>Left <span class="token operator">=</span> T<span class="token punctuation">;</span>\n\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>T1<span class="token operator">-&gt;</span>balFactor<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">case</span> RH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> EH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> RH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> LH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token operator">=</span> T1<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// căn bằng phải trái</span>\n<span class="token keyword">void</span> <span class="token function">rorateRL</span><span class="token punctuation">(</span>AVLTree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    AVLTree T <span class="token operator">=</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>\n    AVLTree T1 <span class="token operator">=</span> T<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>\n    AVLTree T2 <span class="token operator">=</span> T1<span class="token operator">-&gt;</span>Left<span class="token punctuation">;</span>\n\n    T<span class="token operator">-&gt;</span>Right <span class="token operator">=</span> T2<span class="token operator">-&gt;</span>Left<span class="token punctuation">;</span>\n    T2<span class="token operator">-&gt;</span>Left <span class="token operator">=</span> T<span class="token punctuation">;</span>\n    T1<span class="token operator">-&gt;</span>Left <span class="token operator">=</span> T2<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>\n    T2<span class="token operator">-&gt;</span>Right <span class="token operator">=</span> T1<span class="token punctuation">;</span>\n\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>T2<span class="token operator">-&gt;</span>balFactor<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">case</span> RH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> LH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> EH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> LH<span class="token operator">:</span> T<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span> T1<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> RH<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    T2<span class="token operator">-&gt;</span>balFactor <span class="token operator">=</span> EH<span class="token punctuation">;</span>\n    <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token operator">=</span> T2<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">2 KIỂU CĂN BẰNG TỰ ĐỘNG</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// cân bằng tự động trái</span>\n<span class="token keyword">int</span> <span class="token function">balanceLeft</span><span class="token punctuation">(</span>AVLTree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    AVLTree T <span class="token operator">=</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>\n    AVLTree T1 <span class="token operator">=</span> T<span class="token operator">-&gt;</span>Left<span class="token punctuation">;</span>\n\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>T1<span class="token operator">-&gt;</span>balFactor<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">case</span> LH<span class="token operator">:</span> <span class="token function">rorateLL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> EH<span class="token operator">:</span> <span class="token function">rorateLL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> RH<span class="token operator">:</span> <span class="token function">rorateLR</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// cân bằng tự động phải</span>\n<span class="token keyword">int</span> <span class="token function">balanceRight</span><span class="token punctuation">(</span>AVLTree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    AVLTree T <span class="token operator">=</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>\n    AVLTree T1 <span class="token operator">=</span> T<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>\n\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>T1<span class="token operator">-&gt;</span>balFactor<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">case</span> LH<span class="token operator">:</span> <span class="token function">rorateRL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> EH<span class="token operator">:</span> <span class="token function">rorateRR</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> RH<span class="token operator">:</span> <span class="token function">rorateRR</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div></div>',7),v={render:function(n,s){const a=(0,p.up)("OutboundLink"),v=(0,p.up)("comment");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("div",o,[e,(0,p._)("p",null,[c,(0,p._)("a",r,[l,(0,p.Wm)(a)])])]),(0,p._)("h2",u,[k,i,b,(0,p._)("a",m,[d,(0,p.Wm)(a)])]),g,(0,p._)("h3",h,[y,T,(0,p._)("a",w,[L,(0,p.Wm)(a)])]),f,(0,p.Wm)(v)],64)}}}}]);