"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6147],{7863:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-7a3b792a",path:"/devbook/java/Advanced/9.html",title:"Bài 9: Wrapper Classes",lang:"vi",frontmatter:{},excerpt:"",headers:[{level:2,title:"1.Giới thiệu",slug:"_1-gioi-thieu",children:[]},{level:2,title:"2.Sử dụng",slug:"_2-su-dung",children:[]}],filePathRelative:"devbook/java/Advanced/9.md",git:{updatedTime:1629908316e3,contributors:[{name:"Zenfection",email:"44715845+Zenfection1412@users.noreply.github.com",commits:1}]}}},36679:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(66252).uE)('<h1 id="bai-9-wrapper-classes" tabindex="-1"><a class="header-anchor" href="#bai-9-wrapper-classes" aria-hidden="true">#</a> Bài 9: Wrapper Classes</h1><h2 id="_1-gioi-thieu" tabindex="-1"><a class="header-anchor" href="#_1-gioi-thieu" aria-hidden="true">#</a> 1.Giới thiệu</h2><div class="custom-container tip"><p class="custom-container-title">💡 <b>WRAPPER CLASSES</b> LÀ GÌ ?</p><p><code>Wrapper Classes</code> cho phép ta sử dụng các kiểu dữ liệu nguyên thuỷ (<em>int,boolean,float</em>) như một <code>Object</code></p><table><thead><tr><th>Kiễu dữ liệu nguyên thuỷ</th><th>Wrapper Class</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr></tbody></table></div><blockquote><p>🔥 Ngoài <code>int</code> ⇨ <code>Interger</code> và <code>char</code> ⇨ <code>Character</code> thì những kiểu còn lại chỉ cần viết hoa chữ cái đầu là ra <code>Wrapper Class</code></p></blockquote><p>Khi tạo các đối tượng<code>Collection</code>, ta phải sử dụng <code>Wrapper Class</code> chứ không thể kiểu dữ liệu nguyên thuỷ được :</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> myNumbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  SAI</span>\n<span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> myNumbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ĐÚNG</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_2-su-dung" tabindex="-1"><a class="header-anchor" href="#_2-su-dung" aria-hidden="true">#</a> 2.Sử dụng</h2><p>Để tạo một đối tượng <code>Wrapper</code> như sau :</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Integer</span> myInt <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n    <span class="token class-name">Double</span> myDouble <span class="token operator">=</span> <span class="token number">5.99</span><span class="token punctuation">;</span>\n    <span class="token class-name">Character</span> myChar <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myInt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myDouble<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myChar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/* Output : 5\n            5.99\n            A\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">💡 DEBUG NHƯ SAU :</p><br><img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/02/16-16-08-52-Ảnh chụp Màn hình 2021-02-16 lúc 16.07.14.png" width="283"><p>==&gt; Vì là <code>Object</code> nên bạn có thể sử dụng các <code>method</code> lên nó như <code>intValue()</code>, <code>byteValue()</code>, <code>shortValue()</code>, <code>longValue()</code>, <code>floatValue()</code>, <code>doubleValue()</code>, <code>charValue()</code>, <code>booleanValue()</code>..</p></div><p>Bạn cũng có thể sử dụng <code>toString</code> để chuyển thành chuỗi, và <code>length()</code> để biết độ dài chuỗi như sau :</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Integer</span> myInt <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> myString <span class="token operator">=</span> myInt<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//Output : 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',12),e={render:function(n,s){return t}}}}]);