"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6003],{98520:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-372c6f30",path:"/devbook/java/OOP/3.html",title:"Bài 3: Package và tính đóng gói",lang:"vi",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. Encapsulation",slug:"_1-encapsulation",children:[]},{level:2,title:"2. Package & API",slug:"_2-package-api",children:[{level:3,title:"Built-in Packages",slug:"built-in-packages",children:[]},{level:3,title:"User-defined Packages",slug:"user-defined-packages",children:[]}]}],filePathRelative:"devbook/java/OOP/3.md",git:{updatedTime:1629908316e3,contributors:[{name:"Zenfection",email:"44715845+Zenfection1412@users.noreply.github.com",commits:1}]}}},7759:(n,s,a)=>{a.r(s),a.d(s,{default:()=>g});var e=a(66252);const c=(0,e.uE)('<h1 id="bai-3-package-va-tinh-đong-goi" tabindex="-1"><a class="header-anchor" href="#bai-3-package-va-tinh-đong-goi" aria-hidden="true">#</a> Bài 3: Package và tính đóng gói</h1><h2 id="_1-encapsulation" tabindex="-1"><a class="header-anchor" href="#_1-encapsulation" aria-hidden="true">#</a> 1. Encapsulation</h2><div class="custom-container tip"><p class="custom-container-title"><b>Encapsulation</b> là gì ?</p><p>Có nghĩa đơn giản là đảm bảo dữ liệu (<em>nhạy cảm</em>) được ẩn khỏi người dùng, Để làm điều đó, bạn phải :</p><ul><li>Khai báo <code>class</code>,<code>variables</code>, <code>attributes</code> dạng <code>private</code></li><li>Cung cấp phương thức <code>get</code> và <code>set</code> truy cập công khai và cập nhật giá trị của biến <code>private</code></li></ul></div><details class="custom-container details"><summary><img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/07/30-18-02-21-icons8-why_quest.png" width="30"> Lý do sử dụng <code>đóng gói</code></summary><ul><li>Kiểm soát tốt hơn <code>Attributes</code> và <code>Methods</code> của <code>Class</code></li><li><code>Attributes</code> của <code>Class</code> có thể đặt ở chế độ <code>read-only</code> hay <code>write-only</code> (<em>nếu bạn sử dụng set &amp; get</em>)</li><li>Linh hoạt hơn, có thể thay đổi thành phần mã mà không ảnh hưởng các phần khác.</li><li>Tăng độ bảo mật</li></ul></details><div class="custom-container warning"><p class="custom-container-title">🤔 VẤN ĐỀ</p><p>Như bạn đã biết khi đặt biến <code>private</code> thì chỉ có thể truy cập trong <code>class</code> đó (<em>các <code>class</code> khác không truy cập được</em>).</p></div><div class="custom-container tip"><p class="custom-container-title">💡 GIẢI QUYẾT</p><p>🔥 Tuy nhiên có thể truy cập được chúng nếu bạn cung cấp phương thức <code>set</code> và <code>get</code> công khai</p><ul><li><code>set</code> là đặt giá trị</li><li><code>get</code> là trả về giá trị</li></ul><p>⚠️ Cú pháp theo sau là tên của biến và chữ cái đầu viết hoa.</p></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>\n     <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">//khai báo truy cập giới hạn</span>\n\n     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// trả về giá trị của tên biến</span>\n         <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">//this tượng trưng cho object hiện tại</span>\n     <span class="token punctuation">}</span>\n\n     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> newName<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//nhận tham số newName và gán là biến name</span>\n         <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> newName<span class="token punctuation">;</span> <span class="token comment">//this tượng trưng cho object hiện tại</span>\n     <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>🔥 Như bạn đã thấy thì trong <code>get</code> và <code>set</code> thì luôn có từ <code>this</code></p><details class="custom-container details"><summary><img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/07/30-17-39-21-icons8-reading.png" width="25"> Vậy <code>this</code> là gì ?</summary><p><code>this</code> nghĩa là nó, thực chất là một biến tham chiếu tới <code>object</code> hiện tại trong một <code>methods</code> hoặc <code>constructor</code>, có thể sử dụng để :</p><ul><li>Gọi <code>constructor</code> | <code>method</code> | <code>object</code> của class hiện tại</li><li>Truyền một đối số trong lệnh gọi <code>method</code> hoặc <code>constructor</code></li></ul></details></blockquote><div class="custom-container warning"><p class="custom-container-title">⚠️ LƯU Ý</p><p>Không nên khai báo biến là <code>public</code> ==&gt; Bởi <code>đóng gói</code> mà show ra ngoài thì còn gì là đóng nữa.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token class-name">Person</span> myObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     myObj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Zen&quot;</span><span class="token punctuation">;</span>\n     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myObj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token comment">// output : Zen</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">💡 MẸO</p><p>Bạn có thể <code>getName()</code> và <code>setName()</code> để cập nhật biến như sau :</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">Person</span> myObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        myObj<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Zen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myObj<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token comment">// output : Zen</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div><h2 id="_2-package-api" tabindex="-1"><a class="header-anchor" href="#_2-package-api" aria-hidden="true">#</a> 2. Package &amp; API</h2><p><code>Package</code> được sử dụng để nhóm nhiều <code>class</code> lại với nhau.</p><blockquote><p>😁 Hiểu đơn giản thì <code>class</code> là tệp, còn <code>Package</code> là thư mục</p><p>🧚‍♂️ Sử dụng để :</p><ul><li>Tránh xung đột tên</li><li>Bảo trì tốt hơn</li></ul></blockquote><div class="custom-container tip"><p class="custom-container-title">💡 GỒM 2 LOẠI</p><ul><li><code>Built-in Packages</code> : <em>các packages từ <code>Java API</code></em></li><li><code>User-defined Packages</code> : <em>tự tạo các packages của riêng mình</em></li></ul></div><h3 id="built-in-packages" tabindex="-1"><a class="header-anchor" href="#built-in-packages" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/07/30-18-11-20-icons8-keepass.png" width="30"> Built-in Packages</h3><p><code>Java API</code> là một thư viện được viết sẵn, bạn chỉ cần dùng thôi</p>',16),t={class:"custom-container details"},p=(0,e._)("summary",null,"💡 GIẢI THÍCH CỤ THỂ",-1),o=(0,e.Uk)("Thư viện chứa các thành phần quản lí "),l=(0,e._)("code",null,"input",-1),i=(0,e.Uk)(", "),u=(0,e._)("code",null,"database",-1),r=(0,e.Uk)(" và nhiều thứ khác, tham khảo tại trang web của "),d={href:"https://docs.oracle.com/en/java/javase/15/docs/api/index.html",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("tại đây"),m=(0,e.uE)('<img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/02/06-22-05-10-Ảnh chụp Màn hình 2021-02-06 lúc 22.05.04.png"><blockquote><p>Thư viện được chia thành các <code>packages</code> và <code>classes</code> (<em>nghĩa là bạn chỉ cần import <code>class</code> thì nó sẽ có sẵn <code>method</code> và <code>attributes</code> được định sẵn</em>).</p></blockquote>',2),h=(0,e.uE)('<div class="custom-container tip"><p class="custom-container-title">💡 CÁCH DÙNG</p><p>Để sử dụng <code>class</code> hoặc <code>package</code> từ thư viện, bạn sử dụng từ khoá <code>import</code> như sau :</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token class-name"><span class="token namespace">package<span class="token punctuation">.</span>name<span class="token punctuation">.</span></span>Class</span><span class="token punctuation">;</span> <span class="token comment">//import một class đơn</span>\n<span class="token keyword">import</span> <span class="token keyword">package</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span>*<span class="token punctuation">;</span> <span class="token comment">// import toàn bộ package</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div><p><strong>Cụ thể về <code>import</code></strong></p><details class="custom-container details"><summary><img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/07/30-18-16-15-icons8-import.png" width="25"> <code>Import</code> một <code>class</code></summary><p>Ví dụ có một <code>class</code> là <code>Scanner</code> (<em>cho phép người dùng nhập từ bàn phím</em>) : Ta gõ Scanner và enter để nó tự <code>import</code> trong Vscode như sau:</p><img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/02/06-22-17-33-Ảnh chụp Màn hình 2021-02-06 lúc 22.17.24.png" title="" alt="Ảnh chụp Màn hình 2021-02-06 lúc 22.17.24.png" width="500"><blockquote><p>🔥 Chỉ cần enter là nó sẽ tự <code>import</code> vào Để sử dụng <code>class</code> <code>Scanner</code>, ta tạo một <code>Object</code> từ nó và sử dụng nó theo docs như sau:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span>\n<span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span>\n   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token class-name">Scanner</span> myObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Enter username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n       <span class="token class-name">String</span> userName <span class="token operator">=</span> myObj<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Username is: &quot;</span> <span class="token operator">+</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span> \n<span class="token punctuation">}</span><span class="token comment">//Output : nhập gì ra đó</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></blockquote></details><details class="custom-container details"><summary><img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/07/30-18-17-20-icons8-package.png" width="28"> <code>Import</code> một <code>Package</code></summary><p>Như ví dụ trước, ta sử dụng <code>Scanner</code> từ gói <code>java.util</code>, vậy ta chỉ cần thêm <code>*</code> phía sau đó, có nghĩa là tất cả mọi thứ trong gói <code>java.util</code> như sau :</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></details><h3 id="user-defined-packages" tabindex="-1"><a class="header-anchor" href="#user-defined-packages" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/07/30-18-19-44-icons8-user_folder.png" width="30"> User-defined Packages</h3><p>Để <code>import</code> riêng những <code>package</code> của bạn thân thì bạn hãy tự tạo lấy <code>package</code> của riêng nhưng phải đặt nó trong thư mục lưu trữ nó, như này :</p><img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/02/06-22-34-11-Ảnh chụp Màn hình 2021-02-06 lúc 22.34.10.png"><blockquote><p>Sử dụng từ khoá <code>package</code> tử tạo một gói mới :</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> mypack<span class="token punctuation">;</span>\n<span class="token keyword">class</span> <span class="token class-name">MyPackageClass</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Đây là package của tôi!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n  <span class="token punctuation">}</span>   \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></blockquote><p>Mở <code>Terminal</code> hoặc <code>CMD</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>javac -d <span class="token builtin class-name">.</span> MyPackageClass.java\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>Nó sẽ bắt buộc tạo ra 1 <code>MyPackageClass.java</code> nằm trong thư mục <code>mypack</code> như hình dưới đây :</p></blockquote><p><img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/02/06-22-44-55-Ảnh chụp Màn hình 2021-02-06 lúc 22.44.49.png" alt="Ảnh chụp Màn hình 2021-02-06 lúc 22.44.49.png"></p><div class="custom-container warning"><p class="custom-container-title">⚠️ LƯU Ý</p><p>Hãy viết tên <code>Package</code> bằng chữ thường để tránh xung đột với tên <code>class</code>.</p><p>Và bạn chỉ cần gọi <code>class</code> trong <code>package như sau</code> :</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>java mypack.MyPackageClass.java\n//output <span class="token builtin class-name">:</span> Đây là package của tôi<span class="token operator">!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div>',13),g={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[c,(0,e._)("details",t,[p,(0,e._)("p",null,[o,l,i,u,r,(0,e._)("a",d,[k,(0,e.Wm)(a)])]),m]),h],64)}}}}]);