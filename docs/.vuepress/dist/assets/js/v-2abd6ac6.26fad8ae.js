"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2583],{70154:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-2abd6ac6",path:"/cosonganh/CT177-Cau_truc_du_lieu/Thuchanh/2.html",title:"B√†i 2. Danh s√°ch li√™n k·∫øt",lang:"vi",frontmatter:{},excerpt:"",headers:[{level:2,title:"M√¥ h√¨nh",slug:"mo-hinh",children:[]},{level:2,title:"L√Ω thuy·∫øt",slug:"ly-thuyet",children:[]},{level:2,title:"Source Code",slug:"source-code",children:[{level:3,title:"linkedList.h",slug:"linkedlist-h",children:[]},{level:3,title:"sentenceList.h",slug:"sentencelist-h",children:[]}]}],filePathRelative:"cosonganh/CT177-Cau_truc_du_lieu/Thuchanh/2.md",git:{updatedTime:1631081045e3,contributors:[{name:"Zenfection",email:"44715845+Zenfection1412@users.noreply.github.com",commits:5}]}}},9644:(n,s,a)=>{a.r(s),a.d(s,{default:()=>O});var p=a(66252);const t=(0,p.uE)('<h1 id="bai-2-danh-sach-lien-ket" tabindex="-1"><a class="header-anchor" href="#bai-2-danh-sach-lien-ket" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2020/12/16-23-16-51-icons8-link.png" width="40"> B√†i 2. Danh s√°ch li√™n k·∫øt</h1><h2 id="mo-hinh" tabindex="-1"><a class="header-anchor" href="#mo-hinh" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-31-59-icons8_handle_with_care_35px.png"> M√¥ h√¨nh</h2>',2),e={class:"custom-container tip"},o=(0,p._)("p",{class:"custom-container-title"},"üí° M·∫∏O",-1),c=(0,p.Uk)("B·∫°n c√≥ th·ªÉ tham kh·∫£o v√† th·ª±c h√†nh theo m√¥ h√¨nh "),l=(0,p._)("code",null,"Linked List",-1),u=(0,p.Uk)(),r={href:"https://visualgo.net/en/list",target:"_blank",rel:"noopener noreferrer"},i=(0,p.Uk)("t·∫°i ƒë√¢y"),k={id:"ly-thuyet",tabindex:"-1"},b=(0,p._)("a",{class:"header-anchor",href:"#ly-thuyet","aria-hidden":"true"},"#",-1),m=(0,p.Uk)(),d=(0,p._)("img",{src:"https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-30-52-icons8_concept_30px.png"},null,-1),g={href:"https://nguyenvanhieu.vn/danh-sach-lien-ket-don/",target:"_blank",rel:"noopener noreferrer"},N=(0,p.Uk)("L√Ω thuy·∫øt"),w=(0,p._)("h2",{id:"source-code",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#source-code","aria-hidden":"true"},"#"),(0,p.Uk)(),(0,p._)("img",{src:"https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-24-29-icons8_google_code_30px.png"}),(0,p.Uk)(" Source Code")],-1),v={id:"linkedlist-h",tabindex:"-1"},L=(0,p._)("a",{class:"header-anchor",href:"#linkedlist-h","aria-hidden":"true"},"#",-1),y=(0,p.Uk)(),f={href:"https://github.com/Zenfection/zenctu/blob/main/docs/cosonganh/CT177-Cau_truc_du_lieu/Source/LinkedList/linkedList.h",target:"_blank",rel:"noopener noreferrer"},h=(0,p.Uk)("linkedList.h"),S=(0,p.uE)('<div class="custom-container tip"><p class="custom-container-title">C·∫§U TR√öC</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">NODE</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> data<span class="token punctuation">;</span>\n    <span class="token keyword">struct</span> <span class="token class-name">NODE</span><span class="token operator">*</span> Next<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">NODE</span> Node<span class="token punctuation">;</span>\n<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>Head<span class="token punctuation">;</span>\n    Node <span class="token operator">*</span>Tail<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> Size<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>List<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">KH·ªûI T·∫†O R·ªñNG</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">makeNullList</span><span class="token punctuation">(</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    L<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n    L<span class="token operator">-&gt;</span>Tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n    L<span class="token operator">-&gt;</span>Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">HI·ªÇN TH·ªä DANH S√ÅCH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">displayList</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Size = %d&quot;</span><span class="token punctuation">,</span>L<span class="token punctuation">.</span>Size<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">T·∫†O M·ªòT NODE V·ªöI PH·∫¶N T·ª¨</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>Node <span class="token operator">*</span><span class="token function">createNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>newnode <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    newnode<span class="token operator">-&gt;</span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>\n    newnode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> newnode<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">TH√äM NODE V√ÄO ƒê·∫¶U HO·∫∂C CU·ªêI DANH S√ÅCH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">insertList_Frist</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>newNode<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-&gt;</span>Head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        L<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>\n        L<span class="token operator">-&gt;</span>Tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span><span class="token punctuation">{</span>\n        newNode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>\n        L<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    L<span class="token operator">-&gt;</span>Size<span class="token operator">++</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">insertList_End</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>newNode<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-&gt;</span>Head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        L<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>\n        L<span class="token operator">-&gt;</span>Tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span><span class="token punctuation">{</span>\n        L<span class="token operator">-&gt;</span>Tail<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>\n        L<span class="token operator">-&gt;</span>Tail<span class="token operator">=</span>newNode<span class="token punctuation">;</span>\n        newNode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    L<span class="token operator">-&gt;</span>Size<span class="token operator">++</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">TH√äM NODE V√ÄO V·ªä TR√ç P TRONG DANH S√ÅCH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">insertList_byPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span>Node <span class="token operator">*</span>newNode<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> L<span class="token operator">-&gt;</span>Head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">insertList_Frist</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&gt;=</span> L<span class="token operator">-&gt;</span>Size<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">insertList_End</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span><span class="token punctuation">{</span>\n        Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                newNode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n                temp<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>\n                L<span class="token operator">-&gt;</span>Size<span class="token operator">++</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            i<span class="token operator">++</span><span class="token punctuation">;</span>\n            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">TH√äM N NODE V√ÄO DANH S√ÅCH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">inputList</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> x<span class="token punctuation">;</span>\n    Node <span class="token operator">*</span>temp<span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        temp <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">insertList_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>temp<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">KI·ªÇM TRA X TRONG DANH S√ÅCH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">memberList</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">T√åM V·ªä TR√ç NODE CH·ª®A X</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">locateList</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data <span class="token operator">=</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> i<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span><span class="token punctuation">{</span>\n            i<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">XO√Å NODE C√ì V·ªä TR√ç P TRONG DANH S√ÅCH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteList_byPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>\n    Node <span class="token operator">*</span>prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                L<span class="token operator">-&gt;</span>Head<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">else</span><span class="token punctuation">{</span>\n                prev<span class="token operator">-&gt;</span>Next<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            L<span class="token operator">-&gt;</span>Size<span class="token operator">--</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span><span class="token punctuation">{</span>\n            i<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        prev <span class="token operator">=</span> temp<span class="token punctuation">;</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">XO√Å NODE TRONG DANH S√ÅCH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteList_byNode</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> newNode<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>newNode <span class="token operator">==</span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">deleteList_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span><span class="token punctuation">{</span>\n            i<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">XO√Å NODE C√ì PH·∫¶N T·ª¨ X TRONG DANH S√ÅCH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteList_byValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">deleteList_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span><span class="token punctuation">{</span>\n            i<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">T·ªêI ∆ØU DANH S√ÅCH (`1 2 1` -&gt; `1 2`)</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">optimizeList</span><span class="token punctuation">(</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>temp1 <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>\n    Node <span class="token operator">*</span>temp2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp1<span class="token operator">-&gt;</span>Next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        temp2 <span class="token operator">=</span> temp1<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>temp1<span class="token operator">-&gt;</span>data <span class="token operator">==</span> temp2<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token function">deleteList_byNode</span><span class="token punctuation">(</span>temp2<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            temp2 <span class="token operator">=</span> temp2<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        temp1 <span class="token operator">=</span> temp1<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">T√åM NODE C√ì PH·∫¶N T·ª¨ L·ªöN NH·∫§T HO·∫∂C NH·ªé NH·∫§T</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">Find_Max</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>temp<span class="token operator">=</span>L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> max<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">&lt;</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            max<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        temp<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> max<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">Find_Min</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>temp<span class="token operator">=</span>L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> min<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token operator">&gt;</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            min<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        temp<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> min<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">CHUY·ªÇN SANG DANH S√ÅCH KH√ÅC</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">changeList</span><span class="token punctuation">(</span>List L1<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L1<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Size<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">insertList_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token function">createNode</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        i<span class="token operator">++</span><span class="token punctuation">;</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">G·ªòP 2 DANH S√ÅCH TH√ÄNH 1 DANH S√ÅCH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">mergeList</span><span class="token punctuation">(</span>List L1<span class="token punctuation">,</span>List L2<span class="token punctuation">,</span>List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">changeList</span><span class="token punctuation">(</span>L1<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">changeList</span><span class="token punctuation">(</span>L2<span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">L·ªåC S·ªê CH·∫¥N HO·∫∂C L·∫∫ QUA DANH S√ÅCH KH√ÅC</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">filter_evenNumber</span><span class="token punctuation">(</span>List L1<span class="token punctuation">,</span> List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L1<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Size<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">insertList_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token function">createNode</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        i<span class="token operator">++</span><span class="token punctuation">;</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">filter_oddNumber</span><span class="token punctuation">(</span>List L1<span class="token punctuation">,</span> List <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L1<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> L<span class="token operator">-&gt;</span>Size<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">insertList_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token function">createNode</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        i<span class="token operator">++</span><span class="token punctuation">;</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">T√çNH T·ªîNG TRUNG B√åNH PH·∫¶N T·ª¨ TRONG DANH S√ÅCH</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">double</span> <span class="token function">averageList</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>temp <span class="token operator">=</span> L<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>\n    <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        result <span class="token operator">+=</span> temp<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result<span class="token operator">/</span>L<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div>',18),x={id:"sentencelist-h",tabindex:"-1"},H=(0,p._)("a",{class:"header-anchor",href:"#sentencelist-h","aria-hidden":"true"},"#",-1),U=(0,p.Uk)(),T={href:"https://github.com/Zenfection/zenctu/blob/main/docs/cosonganh/CT177-Cau_truc_du_lieu/Source/LinkedList/sentenceList.h",target:"_blank",rel:"noopener noreferrer"},_=(0,p.Uk)("sentenceList.h"),C=(0,p.uE)('<div class="custom-container tip"><p class="custom-container-title">C·∫§U TR√öC</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">NODE</span><span class="token punctuation">{</span>\n    <span class="token keyword">char</span> Word<span class="token punctuation">;</span>\n    <span class="token keyword">struct</span> <span class="token class-name">NODE</span> <span class="token operator">*</span>Next<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">NODE</span> Node<span class="token punctuation">;</span>\n<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>Head<span class="token punctuation">;</span>\n    Node <span class="token operator">*</span>Tail<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> Size<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>Sentence<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">T·∫†O R·ªñNG C√ÇU</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">makeNullSentence</span><span class="token punctuation">(</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    S<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n    S<span class="token operator">-&gt;</span>Tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n    S<span class="token operator">-&gt;</span>Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">HI·ªÇN TH·ªä C√ÇU</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">displaySentence</span><span class="token punctuation">(</span>Sentence S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>temp <span class="token operator">=</span> S<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span>temp<span class="token operator">-&gt;</span>Word<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Size = %d&quot;</span><span class="token punctuation">,</span>S<span class="token punctuation">.</span>Size<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">T·∫†O M·ªòT NODE X L√Ä T·ª™</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>Node <span class="token operator">*</span><span class="token function">createNode</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>newNode <span class="token operator">=</span> <span class="token punctuation">(</span>Node <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    newNode<span class="token operator">-&gt;</span>Word <span class="token operator">=</span> c<span class="token punctuation">;</span>\n    newNode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> newNode<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">CH√àN M·ªòT T·ª™ V√ÄO ƒê·∫¶U HO·∫∂C CU·ªêI C√ÇU</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">insertSentence_Frist</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>newNode<span class="token punctuation">,</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-&gt;</span>Head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        S<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>\n        S<span class="token operator">-&gt;</span>Tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span><span class="token punctuation">{</span>\n        newNode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>\n        S<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    S<span class="token operator">-&gt;</span>Size<span class="token operator">++</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">void</span> <span class="token function">insertSentence_End</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>newNode<span class="token punctuation">,</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-&gt;</span>Head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        S<span class="token operator">-&gt;</span>Head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>\n        S<span class="token operator">-&gt;</span>Tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span><span class="token punctuation">{</span>\n        S<span class="token operator">-&gt;</span>Tail<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>\n        S<span class="token operator">-&gt;</span>Tail<span class="token operator">=</span>newNode<span class="token punctuation">;</span>\n        newNode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    S<span class="token operator">-&gt;</span>Size<span class="token operator">++</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">CH√àN T·ª™ V·ªä TR√ç P TRONG C√ÇU</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">insertSentence_byPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span>Node <span class="token operator">*</span>newNode<span class="token punctuation">,</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> S<span class="token operator">-&gt;</span>Head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">insertSentence_Frist</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">&gt;=</span> S<span class="token operator">-&gt;</span>Size<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">insertSentence_End</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span><span class="token punctuation">{</span>\n        Node <span class="token operator">*</span>temp <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>\n        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                newNode<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n                temp<span class="token operator">-&gt;</span>Next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>\n                S<span class="token operator">-&gt;</span>Size<span class="token operator">++</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            i<span class="token operator">++</span><span class="token punctuation">;</span>\n            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">NH·∫¨P C√ÇU</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">inputSentence</span><span class="token punctuation">(</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token function">fgets</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Node <span class="token operator">*</span>temp<span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        temp <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">insertSentence_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>temp<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">KI·ªÇM TRA T·ª™ X C√ì TRONG C√ÇU</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">memberSentence</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">,</span>Sentence S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>temp <span class="token operator">=</span> S<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">T√åM V·ªä TR√ç T·ª™ X TRONG C√ÇU</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">locateSentence</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">,</span>Sentence S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>temp <span class="token operator">=</span> S<span class="token punctuation">.</span>Head<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> i<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span><span class="token punctuation">{</span>\n            i<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">XO√Å T·ª™ V·ªä TR√ç P TRONG C√ÇU</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteSentence_byPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>temp <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>\n    Node <span class="token operator">*</span>prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                S<span class="token operator">-&gt;</span>Head<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">else</span><span class="token punctuation">{</span>\n                prev<span class="token operator">-&gt;</span>Next<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            S<span class="token operator">-&gt;</span>Size<span class="token operator">--</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span><span class="token punctuation">{</span>\n            i<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        prev <span class="token operator">=</span> temp<span class="token punctuation">;</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">XO√Å T·ª™ X TRONG C√ÇU</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteSentence_byValue</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">,</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>temp <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">deleteSentence_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span><span class="token punctuation">{</span>\n            i<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">XO√Å M·ªòT NODE TRONG C√ÇU</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteSentence_byNode</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>newNode<span class="token punctuation">,</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    Node <span class="token operator">*</span>temp <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>newNode <span class="token operator">==</span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">deleteSentence_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span><span class="token punctuation">{</span>\n            i<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">XO√Å KHO·∫¢NG TR·∫ÆNG D∆Ø TH·ª™A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteWhiteSpace</span><span class="token punctuation">(</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Node <span class="token operator">*</span>temp <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">deleteSentence_byNode</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> temp<span class="token operator">-&gt;</span>Next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Next<span class="token operator">-&gt;</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token function">deleteSentence_byNode</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">CHU·∫®N HO√Å C√ÇU</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">normalizeSentence</span><span class="token punctuation">(</span>Sentence <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">deleteWhiteSpace</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Node <span class="token operator">*</span>temp <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Head<span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">islower</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        temp<span class="token operator">-&gt;</span>Word <span class="token operator">-=</span> <span class="token number">32</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isspace</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isupper</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                temp<span class="token operator">-&gt;</span>Word <span class="token operator">+=</span> <span class="token number">32</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> temp<span class="token operator">-&gt;</span>Next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">islower</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                temp<span class="token operator">-&gt;</span>Word <span class="token operator">-=</span> <span class="token number">32</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div></div>',14),O={render:function(n,s){const a=(0,p.up)("OutboundLink"),O=(0,p.up)("comment");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("div",e,[o,(0,p._)("p",null,[c,l,u,(0,p._)("a",r,[i,(0,p.Wm)(a)])])]),(0,p._)("h2",k,[b,m,d,(0,p._)("a",g,[N,(0,p.Wm)(a)])]),w,(0,p._)("h3",v,[L,y,(0,p._)("a",f,[h,(0,p.Wm)(a)])]),S,(0,p._)("h3",x,[H,U,(0,p._)("a",T,[_,(0,p.Wm)(a)])]),C,(0,p.Wm)(O)],64)}}}}]);