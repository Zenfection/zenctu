"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1852],{60897:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-2753b988",path:"/cosonganh/CT177-Cau_truc_du_lieu/Thuchanh/3.html",title:"Bài 3. Ngăn xếp",lang:"vi",frontmatter:{},excerpt:"",headers:[{level:2,title:"Mô hình",slug:"mo-hinh",children:[]},{level:2,title:"Lý thuyết",slug:"ly-thuyet",children:[]},{level:2,title:"Source Code",slug:"source-code",children:[{level:3,title:"stach.h",slug:"stach-h",children:[]}]}],filePathRelative:"cosonganh/CT177-Cau_truc_du_lieu/Thuchanh/3.md",git:{updatedTime:1631081045e3,contributors:[{name:"Zenfection",email:"44715845+Zenfection1412@users.noreply.github.com",commits:4}]}}},16818:(n,s,a)=>{a.r(s),a.d(s,{default:()=>G});var p=a(66252);const t=(0,p.uE)('<h1 id="bai-3-ngan-xep" tabindex="-1"><a class="header-anchor" href="#bai-3-ngan-xep" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2020/12/16-23-17-18-icons8-pancake.png" width="40"> Bài 3. Ngăn xếp</h1><h2 id="mo-hinh" tabindex="-1"><a class="header-anchor" href="#mo-hinh" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-31-59-icons8_handle_with_care_35px.png"> Mô hình</h2>',2),e={class:"custom-container tip"},o=(0,p._)("p",{class:"custom-container-title"},"GỒM 2 LOẠI",-1),c={href:"https://www.cs.usfca.edu/~galles/visualization/StackArray.html",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("Stack-ArrayList"),u=(0,p.Uk)(" - "),i=(0,p._)("em",null,"Ngăn xếp cài đặt theo danh sách đặc",-1),r={href:"https://www.cs.usfca.edu/~galles/visualization/StackLL.html",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("Stack-LinkedList"),b=(0,p.Uk)(" - "),d=(0,p._)("em",null,"Ngăn xếp cài đạt theo danh sách liên kết",-1),m={id:"ly-thuyet",tabindex:"-1"},g=(0,p._)("a",{class:"header-anchor",href:"#ly-thuyet","aria-hidden":"true"},"#",-1),h=(0,p.Uk)(),v=(0,p._)("img",{src:"https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-30-52-icons8_concept_30px.png"},null,-1),S={href:"https://nguyenvanhieu.vn/ngan-xep-stack/",target:"_blank",rel:"noopener noreferrer"},y=(0,p.Uk)("Lý thuyết"),w=(0,p._)("h2",{id:"source-code",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#source-code","aria-hidden":"true"},"#"),(0,p.Uk)(),(0,p._)("img",{src:"https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-24-29-icons8_google_code_30px.png"}),(0,p.Uk)(" Source Code")],-1),f={id:"stach-h",tabindex:"-1"},_=(0,p._)("a",{class:"header-anchor",href:"#stach-h","aria-hidden":"true"},"#",-1),N=(0,p.Uk)(),T={href:"https://github.com/Zenfection/zenctu/blob/main/docs/cosonganh/CT177-Cau_truc_du_lieu/Source/Stack/stack.h",target:"_blank",rel:"noopener noreferrer"},x=(0,p.Uk)("stach.h"),P=(0,p.uE)('<div class="custom-container tip"><p class="custom-container-title">CẤU TRÚC</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Max_length</span> <span class="token expression"><span class="token number">50</span></span></span>\n<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> Data<span class="token punctuation">[</span>Max_length<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> Top<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>Stack<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">KHỞI TẠO NGĂN XẾP RỖNG</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">makeNullStack</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    S<span class="token operator">-&gt;</span>Top <span class="token operator">=</span> Max_length<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">HIỂN THỊ NGĂN XẾP</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">displayStack</span><span class="token punctuation">(</span>Stack S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> S<span class="token punctuation">.</span>Top <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Max_length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>S<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">THÊM N PHẦN TỬ VÀO NGĂN XẾP</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">inputStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>Stack <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>S<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>S<span class="token operator">-&gt;</span>Top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        S<span class="token operator">-&gt;</span>Top<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">THÊM X TẠI VỊ TRÍ P VÀO NGĂN XẾP</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">insertStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> p<span class="token punctuation">,</span>Stack <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    L<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>\n    L<span class="token operator">-&gt;</span>Top<span class="token operator">--</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">XOÁ X TẠI VỊ TRÍ P TRONG NGĂN XẾP</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleleStack_byPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span>Stack <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> p<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> S<span class="token operator">-&gt;</span>Top<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        S<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    S<span class="token operator">-&gt;</span>Top<span class="token operator">++</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">XOÁ PHẦN TỬ X TRONG NGĂN XẾP</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">deleteStack_byValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>Stack <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Top <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Max_length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">deleleStack_byPos</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">TRẢ VỀ VỊ TRÍ ĐẦU TIÊN CỦA X TRONG NGĂN XẾP</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">locateStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>Stack S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> S<span class="token punctuation">.</span>Top <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Max_length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> i<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">KIỂM TRA X CÓ TRONG NGĂN XẾP</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">memberStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>Stack S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">locateStack</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>S<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">TỐI ƯU NGĂN XẾP (`1 2 1` -&gt; `1 2`)</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">optimizeStack</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> Max_length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> j<span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> S<span class="token operator">-&gt;</span>Top<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> S<span class="token operator">-&gt;</span>Top<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> S<span class="token operator">-&gt;</span>Data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token function">deleleStack_byPos</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">else</span><span class="token punctuation">{</span>\n                j<span class="token operator">--</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        i<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">CHUYỂN NGĂN XẾP QUA NGĂN XẾP MỚI</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">changeStack</span><span class="token punctuation">(</span>Stack S1<span class="token punctuation">,</span>Stack <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> size <span class="token operator">=</span> Max_length<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> i <span class="token operator">=</span> Max_length <span class="token operator">-</span> S1<span class="token punctuation">.</span>Top<span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">insertStack</span><span class="token punctuation">(</span>S1<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>S<span class="token operator">-&gt;</span>Top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        size<span class="token operator">--</span><span class="token punctuation">;</span>\n        i<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">GỘP 2 NGĂN XẾP THÀNH MỘT</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">mergeList</span><span class="token punctuation">(</span>Stack S1<span class="token punctuation">,</span>Stack S2<span class="token punctuation">,</span>Stack <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">changeStack</span><span class="token punctuation">(</span>S1<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">changeStack</span><span class="token punctuation">(</span>S2<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">LỌC PHẨN TỬ CHẲN HOẶC LẺ QUA NGĂN XẾP MỚI</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">filter_evenNumber</span><span class="token punctuation">(</span>Stack S1<span class="token punctuation">,</span>Stack <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> j <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> size <span class="token operator">=</span> Max_length <span class="token operator">-</span> S1<span class="token punctuation">.</span>Top<span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>S1<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">insertStack</span><span class="token punctuation">(</span>S1<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>S<span class="token operator">-&gt;</span>Top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        j<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">filter_oddNumber</span><span class="token punctuation">(</span>Stack S1<span class="token punctuation">,</span>Stack <span class="token operator">*</span>S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> j <span class="token operator">=</span> S<span class="token operator">-&gt;</span>Top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> size <span class="token operator">=</span> Max_length <span class="token operator">-</span> S1<span class="token punctuation">.</span>Top<span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>S1<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">insertStack</span><span class="token punctuation">(</span>S1<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>S<span class="token operator">-&gt;</span>Top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        j<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">TÍNH TRUNG BÌNH CỘNG PHẦN TỬ TRONG NGĂN XẾP</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">double</span> <span class="token function">averageStack</span><span class="token punctuation">(</span>Stack S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> size <span class="token operator">=</span> Max_length <span class="token operator">-</span> S<span class="token punctuation">.</span>Top<span class="token punctuation">;</span>\n    <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">double</span> result<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> j <span class="token operator">=</span> S<span class="token punctuation">.</span>Top<span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        sum <span class="token operator">+=</span> S<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        j<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    result <span class="token operator">=</span> sum <span class="token operator">/</span> size<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></div>',14),G={render:function(n,s){const a=(0,p.up)("OutboundLink"),G=(0,p.up)("comment");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("div",e,[o,(0,p._)("ul",null,[(0,p._)("li",null,[(0,p._)("p",null,[(0,p._)("a",c,[l,(0,p.Wm)(a)]),u,i])]),(0,p._)("li",null,[(0,p._)("p",null,[(0,p._)("a",r,[k,(0,p.Wm)(a)]),b,d])])])]),(0,p._)("h2",m,[g,h,v,(0,p._)("a",S,[y,(0,p.Wm)(a)])]),w,(0,p._)("h3",f,[_,N,(0,p._)("a",T,[x,(0,p.Wm)(a)])]),P,(0,p.Wm)(G)],64)}}}}]);