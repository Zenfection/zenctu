"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3211],{71420:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-2080570c",path:"/cosonganh/CT177-Cau_truc_du_lieu/Thuchanh/5.html",title:"Bài 5. Cây nhị phân",lang:"vi",frontmatter:{},excerpt:"",headers:[{level:2,title:"Mô hình",slug:"mo-hinh",children:[]},{level:2,title:"Lý thuyết",slug:"ly-thuyet",children:[]},{level:2,title:"Source Code",slug:"source-code",children:[{level:3,title:"treeBST.h",slug:"treebst-h",children:[]}]}],filePathRelative:"cosonganh/CT177-Cau_truc_du_lieu/Thuchanh/5.md",git:{updatedTime:1631081045e3,contributors:[{name:"Zenfection",email:"44715845+Zenfection1412@users.noreply.github.com",commits:4}]}}},41469:(n,s,a)=>{a.r(s),a.d(s,{default:()=>N});var p=a(66252);const t=(0,p.uE)('<h1 id="bai-5-cay-nhi-phan" tabindex="-1"><a class="header-anchor" href="#bai-5-cay-nhi-phan" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2020/12/16-23-17-59-icons8-folder_tree.png" width="40"> Bài 5. Cây nhị phân</h1><h2 id="mo-hinh" tabindex="-1"><a class="header-anchor" href="#mo-hinh" aria-hidden="true">#</a> <img src="https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-31-59-icons8_handle_with_care_35px.png"> Mô hình</h2>',2),e={class:"custom-container tip"},o=(0,p._)("p",{class:"custom-container-title"},"DATA VISUALIZATION",-1),c=(0,p.Uk)("Mô hình "),l={href:"https://www.cs.usfca.edu/~galles/visualization/BST.html",target:"_blank",rel:"noopener noreferrer"},u=(0,p.Uk)("tại đây"),r={id:"ly-thuyet",tabindex:"-1"},i=(0,p._)("a",{class:"header-anchor",href:"#ly-thuyet","aria-hidden":"true"},"#",-1),k=(0,p.Uk)(),b=(0,p._)("img",{src:"https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-30-52-icons8_concept_30px.png"},null,-1),m={href:"https://nguyenvanhieu.vn/cay-nhi-phan-binary-tree/",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("Lý thuyết"),g=(0,p._)("h2",{id:"source-code",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#source-code","aria-hidden":"true"},"#"),(0,p.Uk)(),(0,p._)("img",{src:"https://raw.githubusercontent.com/Zenfection/Image/master/2021/05/08-10-24-29-icons8_google_code_30px.png"}),(0,p.Uk)(" Source Code")],-1),h={id:"treebst-h",tabindex:"-1"},f=(0,p._)("a",{class:"header-anchor",href:"#treebst-h","aria-hidden":"true"},"#",-1),y=(0,p.Uk)(),w={href:"https://github.com/Zenfection/zenctu/blob/main/docs/cosonganh/CT177-Cau_truc_du_lieu/Source/BST/treeBST.h",target:"_blank",rel:"noopener noreferrer"},v=(0,p.Uk)("treeBST.h"),L=(0,p.uE)('<div class="custom-container tip"><p class="custom-container-title">CẤU TRÚC</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> data<span class="token punctuation">;</span>\n    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>Left<span class="token punctuation">;</span>\n    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>Right<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>Tree<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">KHỞI TẠO RỘNG TREE</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">makeNullTree</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">THÊM NODE VÀO TRONG TREE</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">insertNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>Tree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Tree temp <span class="token operator">=</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        temp<span class="token operator">-&gt;</span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>\n        temp<span class="token operator">-&gt;</span>Left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n        temp<span class="token operator">-&gt;</span>Right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n        <span class="token operator">*</span>root <span class="token operator">=</span> temp<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">insertNode</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token operator">-&gt;</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token function">insertNode</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token operator">-&gt;</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">TẠO TREE</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>Tree <span class="token function">createTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Tree root<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> n<span class="token punctuation">;</span>\n    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">makeNullTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> x<span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">insertNode</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> root<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">3 CÁCH DUYỆT TREE</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">// duyệt tiền tự</span>\n<span class="token keyword">void</span> <span class="token function">NLR</span><span class="token punctuation">(</span>Tree root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">NLR</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">NLR</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// duyệt trung tự</span>\n<span class="token keyword">void</span> <span class="token function">LNR</span><span class="token punctuation">(</span>Tree root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">LNR</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">LNR</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// duyệt hậu tự</span>\n<span class="token keyword">void</span> <span class="token function">LRN</span><span class="token punctuation">(</span>Tree root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">LRN</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">LRN</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">TRẢ VỀ NODE LỚN HOẶC NHỎ NHẤT TRONG TREE</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>Tree <span class="token function">minNode</span><span class="token punctuation">(</span>Tree root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        root <span class="token operator">=</span> root<span class="token operator">-&gt;</span>Left<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> root<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nTree <span class="token function">maxNode</span><span class="token punctuation">(</span>Tree root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        root <span class="token operator">=</span> root<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> root<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">TRẢ VỀ NODE PHÍA TRƯỚC VÀ NODE PHÍA SAU NODE X</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>Tree <span class="token function">getPrevious</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>Tree root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Tree prevNode <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>data <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            root <span class="token operator">=</span> root<span class="token operator">-&gt;</span>Left<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>data <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            prevNode <span class="token operator">=</span> root<span class="token punctuation">;</span>\n            root <span class="token operator">=</span> root<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> prevNode<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">maxNode</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nTree <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>Tree root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> M<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> pos<span class="token punctuation">;</span>\n    <span class="token function">LNRtoArray</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span>M<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> M<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            pos <span class="token operator">=</span> i<span class="token punctuation">;</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    Tree result <span class="token operator">=</span> <span class="token function">searchNode</span><span class="token punctuation">(</span>M<span class="token punctuation">[</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">XOÁ MỘT NODE TRONG TREE</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">searchStandFor</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>node1<span class="token punctuation">,</span>Tree <span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>Left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">searchStandFor</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span><span class="token punctuation">{</span>\n        <span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>\n        <span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">int</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>Tree <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Tree temp <span class="token operator">=</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token operator">-&gt;</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>data <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token operator">-&gt;</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span><span class="token punctuation">{</span>\n        Tree p <span class="token operator">=</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>Right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>Left<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">else</span><span class="token punctuation">{</span>\n                <span class="token function">searchStandFor</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token operator">-&gt;</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n        <span class="token operator">*</span>root <span class="token operator">=</span> temp<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">TRẢ VỀ CHIỀU CAO CỦA TREE</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>Tree root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span><span class="token punctuation">{</span>\n        <span class="token keyword">int</span> heightLeft <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Left<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> heightRight <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>heightLeft <span class="token operator">&gt;</span> heightRight<span class="token punctuation">)</span>\n            <span class="token keyword">return</span> heightLeft<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">else</span>\n            <span class="token keyword">return</span> heightRight<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></div><div class="custom-container tip"><p class="custom-container-title">HIỂN THỊ ĐƯỜNG ĐI CỦA TREE</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">printPath</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span>Tree root<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>data <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span>root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            root <span class="token operator">=</span> root<span class="token operator">-&gt;</span>Left<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>data <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            root <span class="token operator">=</span> root<span class="token operator">-&gt;</span>Right<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token comment">//root-&gt;data == x</span>\n            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d -&gt; Tim thay&quot;</span><span class="token punctuation">,</span>root<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; -&gt; Khong thay&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></div>',11),N={render:function(n,s){const a=(0,p.up)("OutboundLink"),N=(0,p.up)("comment");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("div",e,[o,(0,p._)("p",null,[c,(0,p._)("a",l,[u,(0,p.Wm)(a)])])]),(0,p._)("h2",r,[i,k,b,(0,p._)("a",m,[d,(0,p.Wm)(a)])]),g,(0,p._)("h3",h,[f,y,(0,p._)("a",w,[v,(0,p.Wm)(a)])]),L,(0,p.Wm)(N)],64)}}}}]);